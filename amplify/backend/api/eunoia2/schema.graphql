type NoteData
@model
@auth (rules: [ { allow: owner } ]) {
    id: ID!
    name: String!
    description: String
    image: String
}

enum SoundApprovalStatus{
    PENDING
    APPROVED
    DISAPPROVED
}

type SoundData
@model (queries: { get: "getSoundData", list: "listSoundDatas" })
@auth (rules: [{ allow: private, operations: [read]}, { allow: owner }]) {
    id: ID!
    userDataID: ID @index(name: "byUserData", sortKeyFields: ["display_name"])
    soundOwner: UserData! @belongsTo(fields: ["userDataID"])
    original_name: String!
    display_name: String!
    short_description: String!
    long_description: String!
    audio_key_s3: String!
    icon: Int!
    fullPlayTime: Int!
    visible_to_others: Boolean!
    audio_names: [String!]!
    approvalStatus: SoundApprovalStatus
    comment: CommentData! @hasOne(fields: ["id"])
    preset: PresetData! @hasOne(fields: ["id"])
    routines: [RoutineData!] @manyToMany(relationName: "RoutineSounds")
}

type CommentData
@model (queries: {get: "getCommentData", list: "listCommentDatas" })
@auth(rules:[{ allow: private, operations: [read]}, { allow: owner }]){
    id: ID!
    soundID: ID! @index(name: "bySoundData", sortKeyFields: ["comment"])
    sound: SoundData! @belongsTo(fields: ["soundID"])
    userDataID: ID! @index(name: "byUserData", sortKeyFields: ["comment"])
    commentOwner: UserData! @belongsTo(fields: ["userDataID"])
    comment: String!
}

type PresetNameAndVolumesMapData
@model (queries: {get: "getPresetNameAndVolumesMapData", list: "listPresetNameAndVolumesMapDatas" })
@auth(rules:[{ allow: private, operations: [read]}, { allow: owner }]){
    key: String!
    volumes: [Int!]!
    presetID: ID! @index(name: "byPresetData", sortKeyFields: ["key"])
    preset: PresetData! @belongsTo(fields: ["presetID"])
}

type PresetData
@model (queries: {get: "getPresetData", list: "listPresetDatas" })
@auth(rules:[{ allow: private, operations: [read]}, { allow: owner }]){
    id: ID!
    soundID: ID! @index(name: "bySoundData")
    sound: SoundData! @belongsTo(fields: ["soundID"])
    presets: [PresetNameAndVolumesMapData!]! @hasMany(indexName: "byPresetData", fields: ["id"])
}

type RoutineData
@model (queries: { get: "getRoutineData", list: "listRoutineDatas" })
@auth (rules: [{ allow: private, operations: [read]}, { allow: owner }]) {
    id: ID!
    userDataID: ID @index(name: "byUserData", sortKeyFields: ["display_name"])
    routineOwner: UserData! @belongsTo(fields: ["userDataID"])
    display_name: String!
    numberOfSteps: Int!
    numberOfTimesUsed: Int!
    fullPlayTime: Int!
    icon: Int!
    visible_to_others: Boolean!
    colorHEX: Int!
    playSoundDuringStretch: Boolean!
    playSoundDuringBreathing: Boolean!
    playSoundDuringSelfLove: Boolean!
    playSoundDuringBedtimeStory: Boolean!
    playSoundDuringSleep: Boolean!
    eachSoundPlayTime: Int!
    bedtimeStoryPlayTime: Int!
    selfLovePlayTime: Int!
    stretchTime: Int!
    breathingTime: Int!
    currentBedtimeStoryPlayingIndex: Int!
    currentBedtimeStoryContinuePlayingTime: Int!
    currentSelfLovePlayingIndex: Int!
    currentSelfLoveContinuePlayingTime: Int!
    sounds: [SoundData!] @manyToMany(relationName: "RoutineSounds")
    stretches: [StretchData!] @manyToMany(relationName: "RoutineStretches")
    breathing: [BreathingData!] @manyToMany(relationName: "RoutineBreathings")
    bedtimeStories: [BedtimeStoryData!] @manyToMany(relationName: "RoutineBedtimeStories")
    selfLoves: [SelfLoveData!] @manyToMany(relationName: "RoutineSelfLoves")
    playingOrder: [String!]!
}

type BedtimeStoryData
@model (queries: { get: "getBedtimeStoryData", list: "listBedtimeStoryDatas" })
@auth (rules: [{ allow: private, operations: [read]}, { allow: owner }]) {
    id: ID!
    userDataID: ID @index(name: "byUserData", sortKeyFields: ["display_name"])
    bedtimeStoryOwner: UserData! @belongsTo(fields: ["userDataID"])
    display_name: String!
    routines: [RoutineData!] @manyToMany(relationName: "RoutineBedtimeStories")
}

type SelfLoveData
@model (queries: { get: "getSelfLoveData", list: "listSelfLoveDatas" })
@auth (rules: [{ allow: private, operations: [read]}, { allow: owner }]) {
    id: ID!
    userDataID: ID @index(name: "byUserData", sortKeyFields: ["display_name"])
    selfLoveOwner: UserData! @belongsTo(fields: ["userDataID"])
    display_name: String!
    routines: [RoutineData!] @manyToMany(relationName: "RoutineSelfLoves")
}

type StretchData
@model (queries: { get: "getStretchData", list: "listStretchDatas" })
@auth (rules: [{ allow: private, operations: [read]}, { allow: owner }]) {
    id: ID!
    userDataID: ID @index(name: "byUserData", sortKeyFields: ["display_name"])
    stretchOwner: UserData! @belongsTo(fields: ["userDataID"])
    display_name: String!
    routines: [RoutineData!] @manyToMany(relationName: "RoutineStretches")
}

type BreathingData
@model (queries: { get: "getBreathingData", list: "listBreathingDatas" })
@auth (rules: [{ allow: private, operations: [read]}, { allow: owner }]) {
    id: ID!
    userDataID: ID @index(name: "byUserData", sortKeyFields: ["display_name"])
    breathingOwner: UserData! @belongsTo(fields: ["userDataID"])
    display_name: String!
    routines: [RoutineData!] @manyToMany(relationName: "RoutineBreathings")
}

type UserData
@model (queries: { get: "getUserData", list: "listUserDatas" })
@auth(rules:[{ allow: private, operations: [read]}, { allow: owner }]){
    id: ID!
    username: String!
    givenName: String!
    familyName: String!
    middleName: String!
    email: String!
    profile_picture_key: String!
    address: String!
    birthdate: String!
    gender: String!
    nickname: String!
    phoneNumber: String!
    authenticated: Boolean!
    subscription: String!
    sounds: [SoundData!]! @hasMany(indexName: "byUserData", fields: ["id"])
    comments: [CommentData!]! @hasMany(indexName: "byUserData", fields: ["id"])
    routines: [RoutineData!]! @hasMany(indexName: "byUserData", fields: ["id"])
    stretches: [StretchData!]! @hasMany(indexName: "byUserData", fields: ["id"])
    breathings: [BreathingData!]! @hasMany(indexName: "byUserData", fields: ["id"])
    selfLoves: [SelfLoveData!]! @hasMany(indexName: "byUserData", fields: ["id"])
    bedtimeStories: [BedtimeStoryData!]! @hasMany(indexName: "byUserData", fields: ["id"])
}