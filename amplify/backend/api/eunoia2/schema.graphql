enum SoundApprovalStatus{
    PENDING
    APPROVED
    DISAPPROVED
}

type SoundData
@model (queries: { get: "getSoundData", list: "listSoundDatas" })
@auth (rules: [{ allow: private, operations: [read]}, { allow: owner }]) {
    id: ID!
    soundUserDataID: ID! @index(name: "SoundsOwnedByUser", sortKeyFields: ["display_name"])
    soundOwner: UserData! @belongsTo(fields: ["soundUserDataID"])
    soundOwnerId: String
    original_name: String!
    display_name: String!
    short_description: String
    long_description: String
    audio_key_s3: String!
    icon: Int!
    colorHEX: Int!
    fullPlayTime: Int!
    visible_to_others: Boolean!
    tags: [String!]!
    audio_names: [String!]!
    approvalStatus: SoundApprovalStatus
    userSoundRelationshipsOwnedBySound: [UserSoundRelationship!] @hasMany(indexName: "UserSoundRelationshipsOwnedBySound", fields: ["id"])
    commentsOwnedBySound: [CommentData!] @hasMany(indexName: "CommentsOwnedBySound", fields: ["id"])
    users: [UserData!] @manyToMany(relationName: "UserSound")
    routines: [RoutineData!] @manyToMany(relationName: "RoutineSound")
    userRoutineRelationships: [UserRoutineRelationship!] @manyToMany(relationName: "UserRoutineRelationshipSound")
}

type UserSoundRelationship
@model (queries: { get: "getUserSoundRelationship", list: "listUserSoundRelationships" })
@auth (rules: [{ allow: private, operations: [read]}, { allow: owner }]) {
    id: ID!
    userSoundRelationshipUserDataID: ID! @index(name: "UserSoundRelationshipsOwnedByUser", sortKeyFields: ["id"])
    userSoundRelationshipOwner: UserData! @belongsTo(fields: ["userSoundRelationshipUserDataID"])
    userSoundRelationshipSoundDataID: ID! @index(name: "UserSoundRelationshipsOwnedBySound", sortKeyFields: ["id"])
    userSoundRelationshipSound: SoundData! @belongsTo(fields: ["userSoundRelationshipSoundDataID"])
    numberOfTimesPlayed: Int
    totalPlayTime: Int
    currentlyListening: Boolean
    usageTimestamps: [AWSDateTime!]
    usagePlayTimes: [Int!]
}

type CommentData
@model (queries: {get: "getCommentData", list: "listCommentDatas" })
@auth(rules:[{ allow: private, operations: [read]}, { allow: owner }]){
    id: ID!
    userDataID: ID! @index(name: "CommentsOwnedByUser", sortKeyFields: ["comment"])
    commentOwner: UserData! @belongsTo(fields: ["userDataID"])
    commentOwnerId: String
    comment: String!
    soundID: ID! @index(name: "CommentsOwnedBySound", sortKeyFields: ["comment"])
    sound: SoundData! @belongsTo(fields: ["soundID"])
    soundId: String
    presetID: ID! @index(name: "CommentsOwnedBySoundPreset", sortKeyFields: ["comment"])
    preset: SoundPresetData! @belongsTo(fields: ["presetID"])
    presetId: String
}

enum SoundPresetPublicityStatus{
    PUBLIC
    PRIVATE
}

type SoundPresetData
@model (queries: {get: "getSoundPresetData", list: "listSoundPresetDatas" })
@auth(rules:[{ allow: private, operations: [read]}, { allow: owner }]){
    id: ID!
    presetUserDataID: ID! @index(name: "SoundPresetsOwnedByUser", sortKeyFields: ["id"])
    presetOwner: UserData! @belongsTo(fields: ["presetUserDataID"])
    presetOwnerId: String
    key: String!
    volumes: [Int!]!
    soundId: String
    publicityStatus: SoundPresetPublicityStatus
    commentsOwnedBySoundPreset: [CommentData!] @hasMany(indexName: "CommentsOwnedBySoundPreset", fields: ["id"])
    userSoundPresetRelationshipsOwnedBySoundPreset: [UserSoundPresetRelationship!] @hasMany(indexName: "UserSoundPresetRelationshipsOwnedBySoundPreset", fields: ["id"])
    users: [UserData!] @manyToMany(relationName: "UserSoundPreset")
    routines: [RoutineData!] @manyToMany(relationName: "RoutineSoundPreset")
    userRoutineRelationships: [UserRoutineRelationship!] @manyToMany(relationName: "UserRoutineRelationshipSoundPreset")
}

type UserSoundPresetRelationship
@model (queries: { get: "getUserSoundPresetRelationship", list: "listUserSoundPresetRelationships" })
@auth (rules: [{ allow: private, operations: [read]}, { allow: owner }]) {
    id: ID!
    userSoundPresetRelationshipUserDataID: ID! @index(name: "UserSoundPresetRelationshipsOwnedByUser", sortKeyFields: ["id"])
    userSoundPresetRelationshipOwner: UserData! @belongsTo(fields: ["userSoundPresetRelationshipUserDataID"])
    userSoundPresetRelationshipSoundSoundPresetDataID: ID! @index(name: "UserSoundPresetRelationshipsOwnedBySoundPreset", sortKeyFields: ["id"])
    userSoundPresetRelationshipSoundPreset: SoundPresetData! @belongsTo(fields: ["userSoundPresetRelationshipSoundSoundPresetDataID"])
    numberOfTimesPlayed: Int
    totalPlayTime: Int
    currentlyListening: Boolean
    usageTimestamps: [AWSDateTime!]
    usagePlayTimes: [Int!]
}

type RoutineData
@model (queries: { get: "getRoutineData", list: "listRoutineDatas" })
@auth (rules: [{ allow: private, operations: [read]}, { allow: owner }]) {
    id: ID!
    userDataID: ID! @index(name: "RoutinesOwnedByUser", sortKeyFields: ["displayName"])
    routineOwner: UserData! @belongsTo(fields: ["userDataID"])
    routineOwnerId: String
    originalName: String
    displayName: String
    numberOfSteps: Int
    fullPlayTime: Int
    icon: Int
    visibleToOthers: Boolean
    colorHEX: Int
    playSoundDuringStretch: Boolean
    playSoundDuringPrayer: Boolean
    playSoundDuringBreathing: Boolean
    playSoundDuringSelfLove: Boolean
    playSoundDuringBedtimeStory: Boolean
    playSoundDuringSleep: Boolean
    eachSoundPlayTime: Int
    prayerPlayTime: Int
    bedtimeStoryPlayTime: Int
    selfLovePlayTime: Int
    stretchTime: Int
    breathingTime: Int
    currentBedtimeStoryPlayingIndex: Int
    currentBedtimeStoryContinuePlayingTime: Int
    currentSelfLovePlayingIndex: Int
    currentSelfLoveContinuePlayingTime: Int
    currentPrayerPlayingIndex: Int
    currentPrayerContinuePlayingTime: Int
    userRoutineRelationshipsOwnedByRoutine: [UserRoutineRelationship!] @hasMany(indexName: "UserRoutineRelationshipsOwnedByRoutine", fields: ["id"])
    sounds: [SoundData!] @manyToMany(relationName: "RoutineSound")
    presets: [SoundPresetData!] @manyToMany(relationName: "RoutineSoundPreset")
    prayers: [PrayerData!] @manyToMany(relationName: "RoutinePrayer")
    stretches: [StretchData!] @manyToMany(relationName: "RoutineStretch")
    breathing: [BreathingData!] @manyToMany(relationName: "RoutineBreathing")
    bedtimeStories: [BedtimeStoryInfoData!] @manyToMany(relationName: "RoutineBedtimeStoryInfo")
    selfLoves: [SelfLoveData!] @manyToMany(relationName: "RoutineSelfLove")
    users: [UserData!] @manyToMany(relationName: "UserRoutine")
    playingOrder: [String!]
}

type UserRoutineRelationship
@model (queries: { get: "getUserRoutineRelationship", list: "listUserRoutineRelationships" })
@auth (rules: [{ allow: private, operations: [read]}, { allow: owner }]) {
    id: ID!
    userRoutineRelationshipUserDataID: ID! @index(name: "UserRoutineRelationshipsOwnedByUser", sortKeyFields: ["id"])
    userRoutineRelationshipOwner: UserData! @belongsTo(fields: ["userRoutineRelationshipUserDataID"])
    userRoutineRelationshipRoutineDataID: ID! @index(name: "UserRoutineRelationshipsOwnedByRoutine", sortKeyFields: ["id"])
    userRoutineRelationshipRoutine: RoutineData! @belongsTo(fields: ["userRoutineRelationshipRoutineDataID"])
    numberOfTimesPlayed: Int
    totalPlayTime: Int
    fullPlayTime: Int
    numberOfSteps: Int
    currentlyListening: Boolean
    playSoundDuringStretch: Boolean
    playSoundDuringPrayer: Boolean
    playSoundDuringBreathing: Boolean
    playSoundDuringSelfLove: Boolean
    playSoundDuringBedtimeStory: Boolean
    playSoundDuringSleep: Boolean
    eachSoundPlayTime: Int
    prayerPlayTime: Int
    bedtimeStoryPlayTime: Int
    selfLovePlayTime: Int
    stretchTime: Int
    breathingTime: Int
    currentBedtimeStoryPlayingIndex: Int
    currentBedtimeStoryContinuePlayingTime: Int
    currentSelfLovePlayingIndex: Int
    currentSelfLoveContinuePlayingTime: Int
    currentPrayerPlayingIndex: Int
    currentPrayerContinuePlayingTime: Int
    usageTimestamps: [AWSDateTime!]
    usagePlayTimes: [Int!]
    playingOrder: [String!]
    sounds: [SoundData!] @manyToMany(relationName: "UserRoutineRelationshipSound")
    presets: [SoundPresetData!] @manyToMany(relationName: "UserRoutineRelationshipSoundPreset")
    prayers: [PrayerData!] @manyToMany(relationName: "UserRoutineRelationshipPrayer")
    stretches: [StretchData!] @manyToMany(relationName: "UserRoutineRelationshipStretch")
    breathing: [BreathingData!] @manyToMany(relationName: "UserRoutineRelationshipBreathing")
    bedtimeStories: [BedtimeStoryInfoData!] @manyToMany(relationName: "UserRoutineRelationshipBedtimeStoryInfo")
    selfLoves: [SelfLoveData!] @manyToMany(relationName: "UserRoutineRelationshipSelfLove")
}

enum BedtimeStoryAudioSource{
    UPLOADED
    RECORDED
}

enum BedtimeStoryApprovalStatus{
    PENDING
    APPROVED
    DISAPPROVED
}

enum BedtimeStoryCreationStatus{
    COMPLETED
    INCOMPLETE
}

type BedtimeStoryInfoData
@model (queries: { get: "getBedtimeStoryInfoData", list: "listBedtimeStoryInfoDatas" })
@auth (rules: [{ allow: private, operations: [read]}, { allow: owner }]) {
    id: ID!
    bedtimeStoryUserDataID: ID! @index(name: "BedtimeStoriesOwnedByUser", sortKeyFields: ["displayName"])
    bedtimeStoryOwner: UserData! @belongsTo(fields: ["bedtimeStoryUserDataID"])
    bedtimeStoryOwnerId: String
    displayName: String!
    shortDescription: String
    longDescription: String
    audioKeyS3: String!
    icon: Int!
    fullPlayTime: Int!
    visibleToOthers: Boolean!
    tags: [String!]
    audioSource: BedtimeStoryAudioSource
    approvalStatus: BedtimeStoryApprovalStatus
    creationStatus: BedtimeStoryCreationStatus
    userBedtimeStoryInfoRelationshipsOwnedByBedtimeStoryInfo: [UserBedtimeStoryInfoRelationship!] @hasMany(indexName: "UserBedtimeStoryInfoRelationshipsOwnedByBedtimeStoryInfo", fields: ["id"])
    routines: [RoutineData!] @manyToMany(relationName: "RoutineBedtimeStoryInfo")
    userRoutineRelationships: [UserRoutineRelationship!] @manyToMany(relationName: "UserRoutineRelationshipBedtimeStoryInfo")
    users: [UserData!] @manyToMany(relationName: "UserBedtimeStoryInfo")
    chapters: [BedtimeStoryInfoChapterData!] @hasMany(indexName: "BedtimeStoryInfoChapters", fields: ["id"])
}

type UserBedtimeStoryInfoRelationship
@model (queries: { get: "getUserBedtimeStoryInfoRelationship", list: "listUserBedtimeStoryInfoRelationships" })
@auth (rules: [{ allow: private, operations: [read]}, { allow: owner }]) {
    id: ID!
    userBedtimeStoryInfoRelationshipUserDataID: ID! @index(name: "UserBedtimeStoryInfoRelationshipsOwnedByUser", sortKeyFields: ["id"])
    userBedtimeStoryInfoRelationshipOwner: UserData! @belongsTo(fields: ["userBedtimeStoryInfoRelationshipUserDataID"])
    userBedtimeStoryInfoRelationshipBedtimeStoryInfoDataID: ID! @index(name: "UserBedtimeStoryInfoRelationshipsOwnedByBedtimeStoryInfo", sortKeyFields: ["id"])
    userBedtimeStoryInfoRelationshipBedtimeStoryInfo: BedtimeStoryInfoData! @belongsTo(fields: ["userBedtimeStoryInfoRelationshipBedtimeStoryInfoDataID"])
    numberOfTimesPlayed: Int
    totalPlayTime: Int
    continuePlayingTime: Int
    currentlyListening: Boolean
    usageTimestamps: [AWSDateTime!]
    usagePlayTimes: [Int!]
}

type BedtimeStoryInfoChapterData
@model (queries: { get: "getBedtimeStoryInfoChapterData", list: "listBedtimeStoryInfoChapterDatas" })
@auth(rules:[{ allow: private, operations: [read]}, { allow: owner }]){
    id: ID!
    display_name: String!
    chapterNumber: Int!
    bedtimeStoryInfoDataID: ID! @index(name: "BedtimeStoryInfoChapters", sortKeyFields: ["id"])
    bedtimeStoryInfo: BedtimeStoryInfoData! @belongsTo(fields: ["bedtimeStoryInfoDataID"])
    bedtimeStoryInfoId: String
}

type PageData
@model (queries: { get: "getPageData", list: "listPageDatas" })
@auth(rules:[{ allow: private, operations: [read]}, { allow: owner }]){
    id: ID!
    display_name: String!
    pageNumber: Int!
    audioKeysS3: [String!]!
    audioNames: [String!]!
    audioLength: [Int]
    bedtimeStoryInfoChapterId: String
}

enum PrayerAudioSource{
    UPLOADED
    RECORDED
}

enum PrayerApprovalStatus{
    PENDING
    APPROVED
    DISAPPROVED
}

type PrayerData
@model (queries: { get: "getPrayerData", list: "listPrayerDatas" })
@auth (rules: [{ allow: private, operations: [read]}, { allow: owner }]) {
    id: ID!
    userDataID: ID! @index(name: "PrayersOwnedByUser", sortKeyFields: ["displayName"])
    prayerOwner: UserData! @belongsTo(fields: ["userDataID"])
    prayerOwnerId: String
    displayName: String!
    shortDescription: String
    longDescription: String
    audioKeyS3: String!
    icon: Int!
    fullPlayTime: Int!
    visibleToOthers: Boolean!
    religion: String
    country: String
    tags: [String!]
    audioSource: PrayerAudioSource
    approvalStatus: PrayerApprovalStatus
    userPrayerRelationshipsOwnedByPrayer: [UserPrayerRelationship!] @hasMany(indexName: "UserPrayerRelationshipsOwnedByPrayer", fields: ["id"])
    routines: [RoutineData!] @manyToMany(relationName: "RoutinePrayer")
    userRoutineRelationships: [UserRoutineRelationship!] @manyToMany(relationName: "UserRoutineRelationshipPrayer")
    users: [UserData!] @manyToMany(relationName: "UserPrayer")
}

type UserPrayerRelationship
@model (queries: { get: "getUserPrayerRelationship", list: "listUserPrayerRelationships" })
@auth (rules: [{ allow: private, operations: [read]}, { allow: owner }]) {
    id: ID!
    userPrayerRelationshipUserDataID: ID! @index(name: "UserPrayerRelationshipsOwnedByUser", sortKeyFields: ["id"])
    userPrayerRelationshipOwner: UserData! @belongsTo(fields: ["userPrayerRelationshipUserDataID"])
    userPrayerRelationshipPrayerDataID: ID! @index(name: "UserPrayerRelationshipsOwnedByPrayer", sortKeyFields: ["id"])
    userPrayerRelationshipPrayer: PrayerData! @belongsTo(fields: ["userPrayerRelationshipPrayerDataID"])
    numberOfTimesPlayed: Int
    totalPlayTime: Int
    currentlyListening: Boolean
    usageTimestamps: [AWSDateTime!]
    usagePlayTimes: [Int!]
}

enum SelfLoveAudioSource{
    UPLOADED
    RECORDED
}

enum SelfLoveApprovalStatus{
    PENDING
    APPROVED
    DISAPPROVED
}

enum SelfLoveCreationStatus{
    COMPLETED
    INCOMPLETE
}

type SelfLoveData
@model (queries: { get: "getSelfLoveData", list: "listSelfLoveDatas" })
@auth (rules: [{ allow: private, operations: [read]}, { allow: owner }]) {
    id: ID!
    userDataID: ID! @index(name: "SelfLovesOwnedByUser", sortKeyFields: ["display_name"])
    selfLoveOwner: UserData! @belongsTo(fields: ["userDataID"])
    selfLoveOwnerId: String
    display_name: String!
    shortDescription: String
    longDescription: String
    audioKeyS3: String!
    icon: Int!
    fullPlayTime: Int!
    visibleToOthers: Boolean!
    lyrics: [String!]
    tags: [String!]
    audioKeysS3: [String!]
    audioNames: [String!]
    audioLengths: [Int]
    audioSource: SelfLoveAudioSource
    approvalStatus: SelfLoveApprovalStatus
    creationStatus: SelfLoveCreationStatus
    userSelfLoveRelationshipsOwnedBySelfLove: [UserSelfLoveRelationship!] @hasMany(indexName: "UserSelfLoveRelationshipsOwnedBySelfLove", fields: ["id"])
    routines: [RoutineData!] @manyToMany(relationName: "RoutineSelfLove")
    userRoutineRelationships: [UserRoutineRelationship!] @manyToMany(relationName: "UserRoutineRelationshipSelfLove")
    users: [UserData!] @manyToMany(relationName: "UserSelfLove")
}

type UserSelfLoveRelationship
@model (queries: { get: "getUserSelfLoveRelationship", list: "listUserSelfLoveRelationships" })
@auth (rules: [{ allow: private, operations: [read]}, { allow: owner }]) {
    id: ID!
    userSelfLoveRelationshipUserDataID: ID! @index(name: "UserSelfLoveRelationshipsOwnedByUser", sortKeyFields: ["id"])
    userSelfLoveRelationshipOwner: UserData! @belongsTo(fields: ["userSelfLoveRelationshipUserDataID"])
    userSelfLoveRelationshipSelfLoveDataID: ID! @index(name: "UserSelfLoveRelationshipsOwnedBySelfLove", sortKeyFields: ["id"])
    userSelfLoveRelationshipSelfLove: SelfLoveData! @belongsTo(fields: ["userSelfLoveRelationshipSelfLoveDataID"])
    numberOfTimesPlayed: Int
    totalPlayTime: Int
    continuePlayingTime: Int
    currentlyListening: Boolean
    usageTimestamps: [AWSDateTime!]
    usagePlayTimes: [Int!]
}

type StretchData
@model (queries: { get: "getStretchData", list: "listStretchDatas" })
@auth (rules: [{ allow: private, operations: [read]}, { allow: owner }]) {
    id: ID!
    userDataID: ID! @index(name: "StretchesOwnedByUser", sortKeyFields: ["display_name"])
    stretchOwner: UserData! @belongsTo(fields: ["userDataID"])
    stretchOwnerId: String
    display_name: String!
    routines: [RoutineData!] @manyToMany(relationName: "RoutineStretch")
    userRoutineRelationships: [UserRoutineRelationship!] @manyToMany(relationName: "UserRoutineRelationshipStretch")
    users: [UserData!] @manyToMany(relationName: "UserStretch")
}

type BreathingData
@model (queries: { get: "getBreathingData", list: "listBreathingDatas" })
@auth (rules: [{ allow: private, operations: [read]}, { allow: owner }]) {
    id: ID!
    userDataID: ID! @index(name: "BreathingsOwnedByUser", sortKeyFields: ["display_name"])
    breathingOwner: UserData! @belongsTo(fields: ["userDataID"])
    breathingOwnerId: String
    display_name: String!
    routines: [RoutineData!] @manyToMany(relationName: "RoutineBreathing")
    userRoutineRelationships: [UserRoutineRelationship!] @manyToMany(relationName: "UserRoutineRelationshipBreathing")
    users: [UserData!] @manyToMany(relationName: "UserBreathing")
}

type UserData
@model (queries: { get: "getUserData", list: "listUserDatas" })
@auth(rules:[{ allow: private, operations: [read]}, { allow: owner }]){
    id: ID!
    username: String!
    amplifyAuthUserId: String!
    givenName: String!
    familyName: String!
    middleName: String!
    email: String!
    profile_picture_key: String!
    address: String!
    birthdate: String!
    gender: String!
    nickname: String!
    phoneNumber: String!
    authenticated: Boolean!
    subscription: String!
    userSoundRelationshipsOwnedByUser: [UserSoundRelationship!] @hasMany(indexName: "UserSoundRelationshipsOwnedByUser", fields: ["id"])
    userBedtimeStoryInfoRelationshipsOwnedByUser: [UserBedtimeStoryInfoRelationship!] @hasMany(indexName: "UserBedtimeStoryInfoRelationshipsOwnedByUser", fields: ["id"])
    userPrayerRelationshipsOwnedByUser: [UserPrayerRelationship!] @hasMany(indexName: "UserPrayerRelationshipsOwnedByUser", fields: ["id"])
    userSelfLoveRelationshipsOwnedByUser: [UserSelfLoveRelationship!] @hasMany(indexName: "UserSelfLoveRelationshipsOwnedByUser", fields: ["id"])
    userRoutineRelationshipsOwnedByUser: [UserRoutineRelationship!] @hasMany(indexName: "UserRoutineRelationshipsOwnedByUser", fields: ["id"])
    userSoundPresetRelationshipsOwnedByUser: [UserSoundPresetRelationship!] @hasMany(indexName: "UserSoundPresetRelationshipsOwnedByUser", fields: ["id"])
    soundsOwnedByUser: [SoundData!] @hasMany(indexName: "SoundsOwnedByUser", fields: ["id"])
    sounds: [SoundData!] @manyToMany(relationName: "UserSound")
    presetsOwnedByUser: [SoundPresetData!] @hasMany(indexName: "SoundPresetsOwnedByUser", fields: ["id"])
    presets: [SoundPresetData!] @manyToMany(relationName: "UserSoundPreset")
    commentsOwnedByUser: [CommentData!] @hasMany(indexName: "CommentsOwnedByUser", fields: ["id"])
    routinesOwnedByUser: [RoutineData!] @hasMany(indexName: "RoutinesOwnedByUser", fields: ["id"])
    routines: [RoutineData!] @manyToMany(relationName: "UserRoutine")
    stretchesOwnedByUser: [StretchData!] @hasMany(indexName: "StretchesOwnedByUser", fields: ["id"])
    stretches: [StretchData!] @manyToMany(relationName: "UserStretch")
    prayersOwnedByUser: [PrayerData!] @hasMany(indexName: "PrayersOwnedByUser", fields: ["id"])
    prayers: [PrayerData!] @manyToMany(relationName: "UserPrayer")
    breathingsOwnedByUser: [BreathingData!] @hasMany(indexName: "BreathingsOwnedByUser", fields: ["id"])
    breathings: [BreathingData!] @manyToMany(relationName: "UserBreathing")
    selfLovesOwnedByUser: [SelfLoveData!] @hasMany(indexName: "SelfLovesOwnedByUser", fields: ["id"])
    selfLoves: [SelfLoveData!] @manyToMany(relationName: "UserSelfLove")
    bedtimeStoriesOwnedByUser: [BedtimeStoryInfoData!] @hasMany(indexName: "BedtimeStoriesOwnedByUser", fields: ["id"])
    bedtimeStories: [BedtimeStoryInfoData!] @manyToMany(relationName: "UserBedtimeStoryInfo")
    userSavedSoundRelationshipList: [UserSoundRelationship]
    userSavedBedtimeStoryInfoRelationshipList: [UserBedtimeStoryInfoRelationship]
    userSavedPrayerRelationshipList: [UserPrayerRelationship]
    userSavedSelfLoveRelationshipList: [UserSelfLoveRelationship]
}